(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: 'Simran'"
p3
sS'layer'
p4
S'/home/simran/web2py/applications/IIIT_calendars/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport os\nimport datetime\nimport fileinput\n@auth.requires_login()\ndef index():\n   return locals()\n   \ndef calendar():\n    p=db(db.events.Nameofuser==\'Simran\').select()\n    return locals()\n    \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n    \ndef add_events():\n    form=SQLFORM(db.events).process(next=URL(\'default\',\'index\'))\n    return locals()\n    \ndef add_tasks():\n    form=SQLFORM(db.tasks)\n    if form.process().accepted:\n        response.flash="Done"\n    return locals()\n    \ndef editeventdetails():\n    return locals()\n    \ndef edittaskdetails():\n    return locals()\n    \ndef edit_events():\n    c=request.post_vars\n    p=db(db.events.Title==c[\'event\']).select(db.events.id)\n    from gluon.tools import Crud\n    print p[0]\n    crud = Crud(db)\n    form=crud.update(db.events,int(p[0].id))\n    if form.process().accepted:\n        response.flash="Done"\n    return locals()\n\ndef printn():\n\treturn locals()\n\nresponse._vars=response._caller(calendar)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/simran/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/simran/web2py/applications/IIIT_calendars/controllers/default.py", line 104, in <module>\n  File "/home/simran/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/simran/web2py/applications/IIIT_calendars/controllers/default.py", line 19, in calendar\n    p=db(db.events.Nameofuser==\'Simran\').select()\n  File "/home/simran/web2py/gluon/dal.py", line 8905, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/simran/web2py/gluon/dal.py", line 2146, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/simran/web2py/gluon/dal.py", line 1618, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/simran/web2py/gluon/dal.py", line 1478, in _select\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/home/simran/web2py/gluon/dal.py", line 1311, in expand\n    return op(first, second)\n  File "/home/simran/web2py/gluon/dal.py", line 1239, in EQ\n    self.expand(second, first.type))\n  File "/home/simran/web2py/gluon/dal.py", line 1321, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/simran/web2py/gluon/dal.py", line 1754, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'Simran\'\n'
p11
s.