# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################
import os
import datetime
import fileinput
@auth.requires_login()
def index():
   'auth' in globals() 
   if auth.user.id==18:
       redirect(URL('admin_op'))
   return locals()
   
def calendar():
    c=request.vars.username
    q=db(db.auth_user.id==int(c)).select(db.auth_user.first_name)[0]
    return locals()
    
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())


def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
    
def add_events():
    db.events.Nameofuser.default=auth.user.first_name
    form=SQLFORM(db.events).process(next=URL('default','index'))
    return locals()
    
def add_tasks():
    form=SQLFORM(db.tasks)
    if form.process().accepted:
        response.flash="Done"
    return locals()
    
def editeventdetails():
    return locals()
    
def edittaskdetails():
    return locals()
    
def edit_events2():
    form = SQLFORM(db.events, request.vars.event)
    if form.accepts(request.vars, session):
        redirect("index")
    elif form.errors:
        response.flash = "temp"
    return dict(form=form)

def delete_eventdetails():
    return locals()

def delete_event():
    c=request.vars.event
    db(db.events.Title==c).delete()
    return
def admin_op():
    c=auth.user.first_name
    p=db(db.auth_user.id!=18).select(db.auth_user.first_name,db.auth_user.id)
    return locals()

#def edit_events():
 #  c=request.post_vars
  #  print"c: ", c
   # p=db(db.events.Title==request.post_vars.event).select().first()
    #    form = SQLFORM(db.events, i.id)
     #   if form.accepts(request.vars,session):
      #      redirect(URL('index'))
       # elif form.errors:
        #    response.flash='Errors in form'
    #return dict(form=form)

def printn():
	return locals()
